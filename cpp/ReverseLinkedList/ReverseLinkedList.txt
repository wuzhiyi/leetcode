class Solution {
public:
	ListNode* reverseList_iteratively(ListNode* head) {
		ListNode *h=NULL, *p=NULL;
		while(head=1) {
			p = head-next = 1->next = 2;
			head->next = 1->next = h = NULL;
			h = head = 1;
			head = p = 2;
		} (head=2) {
			p = head-next = 2->next = 3;
			head->next = 2->next = h = 1;
			h = head = 2;
			head = p = 3;
		} (head=..)
	}

	ListNode* reverseList_recursively(ListNode* head=1) {
	if (head=1==NULL || head->next=2==NULL) /*FALSE*/;
	ListNode *h = reverseList_recursively(head->next=2);
	head->next->next = head;
	head->next = NULL;
	return h;
	} reverseList_recursively(head=2) {
	if (head=2==NULL || head->next=3==NULL) /*FALSE*/;
	ListNode *h = reverseList_recursively(head->next=3);
	head->next->next = head;
	head->next = NULL;
	return h;
	} reverseList_recursively(head=3) {
	if (head=3==NULL || head->next=NULL==NULL) return head=3;
	}
}